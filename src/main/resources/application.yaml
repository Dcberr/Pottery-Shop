server:
  port: ${PORT}
  servlet:
    context-path: /potteryshop

spring:
  application:
    name: PotteryShop

  datasource:
    # Use the service name from docker-compose instead of localhost
    url: jdbc:mysql://${DB_HOST}:3306/${DB_DATABASE_NAME}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: org.hibernate.dialect.MySQL8Dialect
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect

  mail:
    host: smtp.gmail.com
    port: ${MAIL_PORT}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  redis:
    host: ${REDIS_HOST}
    port: ${REDIS_PORT}

  kafka:
    bootstrap-servers: kafka-1:9092
    consumer:
      group-id: notification-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

minio:
  url: ${MINIO_URL}
  accessKey: ${MINIO_ACCESSKEY}
  secretKey: ${MINIO_SECRETKEY}
  bucketName: ${MINIO_BUCKETNAME}

jwt:
  signerKey: ${SIGNERKEY}
  valid-duration: 3600
  refreshable-duration: 7200
  reset-duration: 3600

logging:
  level:
    org:
      springframework:
        web:
          socket: DEBUG
        messaging: DEBUG
