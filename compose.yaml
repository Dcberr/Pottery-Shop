services:
  mysql:
    image: 'mysql:8.0'  # Changed to a stable MySQL version
    restart: always
    environment:
      - 'MYSQL_DATABASE=${DB_DATABASE_NAME}'
      - 'MYSQL_ROOT_PASSWORD=${DB_PASSWORD}'
      - 'MYSQL_USER=${DB_USERNAME}'
      - 'MYSQL_PASSWORD=${DB_PASSWORD}'
    ports:
      - '${DB_PORT}:3306'
    networks:
      - backend

  redis:
    image: 'redis:7.2'
    restart: always
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    networks:
      - backend

  zookeeper:
    image: 'wurstmeister/zookeeper:latest'
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: 'wurstmeister/kafka:latest'
    container_name: kafka
    restart: "on-failure"  # Changed from "no" to restart on failure
    depends_on:
      zookeeper:
        condition: service_healthy  # Wait for zookeeper to be healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092,INTERNAL://:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "test-topic:1:1"  # Optional: Auto-create a test topic
      # Add hostname command to ensure proper DNS resolution
      KAFKA_OPTS: "-Djava.net.preferIPv4Stack=true"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  backend:
    driver: bridge
    # Explicitly set the name to avoid any potential name conflicts
    name: kafka-network