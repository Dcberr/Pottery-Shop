services:
  # Your Spring Boot Application
  potteryshop-app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - "${PORT}:8080"
    environment:
      - PORT=${PORT}
      - DB_HOST=mysql
      - DB_DATABASE_NAME=${DB_DATABASE_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_PORT=3306
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESSKEY=${MINIO_ACCESSKEY}
      - MINIO_SECRETKEY=${MINIO_SECRETKEY}
      - MINIO_BUCKETNAME=${MINIO_BUCKETNAME}
      - SIGNERKEY=${SIGNERKEY}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      kafka-1:
        condition: service_started
    networks:
      - backend

  mysql:
    image: "mysql:8.0"
    restart: always
    environment:
      - "MYSQL_DATABASE=${DB_DATABASE_NAME}"
      - "MYSQL_ROOT_PASSWORD=${DB_PASSWORD}"
      - "MYSQL_USER=${DB_USERNAME}"
      - "MYSQL_PASSWORD=${DB_PASSWORD}"
    ports:
      - "${DB_PORT}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${DB_PASSWORD}",
        ]
      timeout: 20s
      retries: 10
    networks:
      - backend

  redis:
    image: "redis:7.2"
    restart: always
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    restart: "on-failure"
    networks:
      - backend

  kafka-1:
    image: confluentinc/cp-kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    restart: "on-failure"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend

  # Optional: MinIO for object storage
  minio:
    image: minio/minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESSKEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRETKEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - backend

volumes:
  mysql_data:
  redis_data:
  minio_data:

networks:
  backend:
    driver: bridge
    name: kafka-network
